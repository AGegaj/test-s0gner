// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: signature.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createSignature = `-- name: CreateSignature :one
INSERT INTO signatures (
    user_id,
    signature,
    answers,
    questions,
    timestamp
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, user_id, signature, answers, questions, timestamp
`

type CreateSignatureParams struct {
	UserID    string    `json:"user_id"`
	Signature string    `json:"signature"`
	Answers   []string  `json:"answers"`
	Questions []string  `json:"questions"`
	Timestamp time.Time `json:"timestamp"`
}

func (q *Queries) CreateSignature(ctx context.Context, arg CreateSignatureParams) (Signature, error) {
	row := q.queryRow(ctx, q.createSignatureStmt, createSignature,
		arg.UserID,
		arg.Signature,
		pq.Array(arg.Answers),
		pq.Array(arg.Questions),
		arg.Timestamp,
	)
	var i Signature
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Signature,
		pq.Array(&i.Answers),
		pq.Array(&i.Questions),
		&i.Timestamp,
	)
	return i, err
}

const getSignatureByUserIdAndSignature = `-- name: GetSignatureByUserIdAndSignature :one
SELECT id, user_id, signature, answers, questions, timestamp FROM signatures 
WHERE user_id = $1 AND signature = $2
`

type GetSignatureByUserIdAndSignatureParams struct {
	UserID    string `json:"user_id"`
	Signature string `json:"signature"`
}

func (q *Queries) GetSignatureByUserIdAndSignature(ctx context.Context, arg GetSignatureByUserIdAndSignatureParams) (Signature, error) {
	row := q.queryRow(ctx, q.getSignatureByUserIdAndSignatureStmt, getSignatureByUserIdAndSignature, arg.UserID, arg.Signature)
	var i Signature
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Signature,
		pq.Array(&i.Answers),
		pq.Array(&i.Questions),
		&i.Timestamp,
	)
	return i, err
}
